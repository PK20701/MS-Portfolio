"""
This module serves as a lightweight, file-based feature store.

It defines the metadata for all features used in the churn model and provides
a simple API to retrieve feature sets for training and inference.

The offline store is a single Parquet file located at:
`data/transformed/transformed_features.parquet`

This file is generated by the `transform_and_store.py` script.
"""
import pandas as pd
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

# --- Feature Store Configuration ---
_OFFLINE_STORE_PATH = Path(__file__).parent.parent / "data" / "transformed" / "transformed_features.parquet"
ENTITY_ID = "customerID"
TARGET_VARIABLE = "Churn"

# --- Feature Definitions (Metadata) ---
# In a more advanced system, this could be a YAML file or a database table.

FEATURE_DEFINITIONS = [
    {"name": "gender", "description": "Customer's gender (binary encoded)", "source": "accounts"},
    {"name": "SeniorCitizen", "description": "Whether the customer is a senior citizen (binary)", "source": "accounts"},
    {"name": "Partner", "description": "Whether the customer has a partner (binary)", "source": "accounts"},
    {"name": "Dependents", "description": "Whether the customer has dependents (binary)", "source": "accounts"},
    {"name": "tenure", "description": "Number of months the customer has stayed with the company", "source": "accounts"},
    {"name": "PhoneService", "description": "Whether the customer has phone service (binary)", "source": "accounts"},
    {"name": "PaperlessBilling", "description": "Whether the customer has paperless billing (binary)", "source": "accounts"},
    {"name": "MonthlyCharges", "description": "The amount charged to the customer monthly", "source": "accounts"},
    {"name": "TotalCharges", "description": "The total amount charged to the customer", "source": "accounts"},

    # Features from one-hot encoding
    {"name": "MultipleLines_No phone service", "description": "OHE feature for MultipleLines", "source": "accounts"},
    {"name": "MultipleLines_Yes", "description": "OHE feature for MultipleLines", "source": "accounts"},
    {"name": "InternetService_Fiber optic", "description": "OHE feature for InternetService", "source": "accounts"},
    {"name": "InternetService_No", "description": "OHE feature for InternetService", "source": "accounts"},
    {"name": "OnlineSecurity_No internet service", "description": "OHE feature for OnlineSecurity", "source": "accounts"},
    {"name": "OnlineSecurity_Yes", "description": "OHE feature for OnlineSecurity", "source": "accounts"},
    {"name": "OnlineBackup_No internet service", "description": "OHE feature for OnlineBackup", "source": "accounts"},
    {"name": "OnlineBackup_Yes", "description": "OHE feature for OnlineBackup", "source": "accounts"},
    {"name": "DeviceProtection_No internet service", "description": "OHE feature for DeviceProtection", "source": "accounts"},
    {"name": "DeviceProtection_Yes", "description": "OHE feature for DeviceProtection", "source": "accounts"},
    {"name": "TechSupport_No internet service", "description": "OHE feature for TechSupport", "source": "accounts"},
    {"name": "TechSupport_Yes", "description": "OHE feature for TechSupport", "source": "accounts"},
    {"name": "StreamingTV_No internet service", "description": "OHE feature for StreamingTV", "source": "accounts"},
    {"name": "StreamingTV_Yes", "description": "OHE feature for StreamingTV", "source": "accounts"},
    {"name": "StreamingMovies_No internet service", "description": "OHE feature for StreamingMovies", "source": "accounts"},
    {"name": "StreamingMovies_Yes", "description": "OHE feature for StreamingMovies", "source": "accounts"},
    {"name": "Contract_One year", "description": "OHE feature for Contract", "source": "accounts"},
    {"name": "Contract_Two year", "description": "OHE feature for Contract", "source": "accounts"},
    {"name": "PaymentMethod_Credit card (automatic)", "description": "OHE feature for PaymentMethod", "source": "accounts"},
    {"name": "PaymentMethod_Electronic check", "description": "OHE feature for PaymentMethod", "source": "accounts"},
    {"name": "PaymentMethod_Mailed check", "description": "OHE feature for PaymentMethod", "source": "accounts"},

    # Engineered features from interactions data
    {"name": "total_interactions", "description": "Total number of interactions per customer", "source": "interactions"},
    {"name": "days_since_last_interaction", "description": "Days since the customer's last interaction", "source": "interactions"},
    {"name": "billing_inquiry", "description": "Count of billing inquiries", "source": "interactions"},
    {"name": "complaint", "description": "Count of complaints", "source": "interactions"},
    {"name": "service_upgrade", "description": "Count of service upgrades", "source": "interactions"},
    {"name": "support_call", "description": "Count of support calls", "source": "interactions"},
    {"name": "website_visit", "description": "Count of website visits", "source": "interactions"},

    # Engineered features from transform_and_store.py
    {"name": "TenureInYears", "description": "Customer tenure in years", "source": "engineered"},
    {"name": "NumAdditionalServices", "description": "Count of additional services subscribed to", "source": "engineered"},
    {"name": "MonthlyTenureRatio", "description": "Ratio of monthly charges to tenure", "source": "engineered"},
]

ALL_FEATURE_NAMES = [f["name"] for f in FEATURE_DEFINITIONS]


def get_feature_view(feature_names: list[str] = ALL_FEATURE_NAMES) -> pd.DataFrame:
    """
    Retrieves a feature view from the offline store (Parquet file).

    This function acts as the retrieval API for the feature store.

    Args:
        feature_names: A list of feature names to retrieve.

    Returns:
        A pandas DataFrame containing the requested features, plus the
        entity ID and target variable for model training.
    """
    logger.info(f"Retrieving features from offline store at: {_OFFLINE_STORE_PATH}")
    if not _OFFLINE_STORE_PATH.exists():
        msg = f"Feature store not found at {_OFFLINE_STORE_PATH}. Please run the pipeline first."
        logger.error(msg)
        raise FileNotFoundError(msg)

    df = pd.read_parquet(_OFFLINE_STORE_PATH)
    logger.info(f"Loaded {len(df.columns)} columns from feature store.")

    # Ensure all required columns are present
    required_cols = [ENTITY_ID, TARGET_VARIABLE] + feature_names
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Columns missing from feature store: {missing_cols}")

    logger.info(f"Returning feature view with {len(required_cols)} columns.")
    return df[required_cols]